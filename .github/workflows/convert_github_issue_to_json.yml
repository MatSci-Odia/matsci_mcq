name: Convert Issue to Question File

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:

permissions:
  contents: write  # ðŸ‘ˆ REQUIRED to allow push from github-actions bot

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: test  # Ensure we're on the correct branch

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Parse Issue and Convert to JSON
      run: |
        echo '${{ toJson(github.event.issue) }}' > issue.json
        cat issue.json
        file_name=$(python .github/scripts/convert_github_issue_to_json.py)
        echo "file_name=$file_name" >> "$GITHUB_OUTPUT"

    - name: Run selected script and generate document
      run: |
        python matsci_mcq.py "resources/${{ steps.parse_issue.outputs.file_name }}"

    - name: Upload .docx as artifact
      uses: actions/upload-artifact@v4
      with:
        name: mcq-doc
        path: "*.docx"
        retention-days: 7

    - name: Comment on the issue with document link
      if: success() && (hashFiles('*.docx') != '')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const issueNumber = context.issue.number;
          const repoOwner = context.repo.owner;
          const repoName = context.repo.repo;
          const runId = process.env.GITHUB_RUN_ID;

          // Find the first .docx file
          const docxFiles = fs.readdirSync('.').filter(f => f.endsWith('.docx'));
          if (docxFiles.length === 0) {
            core.setFailed("No .docx files found.");
            return;
          }

          const artifactUrl = `https://github.com/${repoOwner}/${repoName}/actions/runs/${runId}`;
          const fileName = docxFiles[0];

          // Add comment to the existing issue
          await github.rest.issues.createComment({
            owner: repoOwner,
            repo: repoName,
            issue_number: issueNumber,
            body: `ðŸ“„ A new document \`${fileName}\` has been generated.\n\nðŸ”— [Download here](${artifactUrl})`
          });